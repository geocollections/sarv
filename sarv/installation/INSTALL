I. ENVIRONMENT

1. (optional) Create virtualenv "sarv":
"sudo virtualenv sarv --no-site-packages -p /usr/bin/python3.3"

2. Install Django:
"sudo ./bin/pip-3.3 install Django==1.8"

3. Install MySQL connector:
"sudo ./bin/pip-3.3 install --egg http://cdn.mysql.com/Downloads/Connector-Python/mysql-connector-python-2.1.3.zip"

4. Install PIL
"pip3 install Pillow"

II. FILES

1. Download project files to specified location:
1.1 Download project files, "sarv" git: 
"git clone https://github.com/geocollections/sarv.git"
1.2 Create "apps" folder and go to "apps"
1.3 git clone other apps (acl,custom,menu,nextify,user_feedback) into "apps" folder

2. Add local_settings.py file to project ("sarv") folder

4. settings.py:
 -Fill SECRET_KEY with random symbols
 -MODEL_APP needs to point to Django application where the content models.py reside

(5. add models.py to app specified in MODEL_APP. This models.py file must include objects specified in "sarv" folder models_default.py)

6. Create config.py inside nextify app. config_blank.py can be used as boilerplate.

III. DATABASE
By now you have specified connections settings in local_settings.py.
There are two ways to populate database with necessary data: via Django or with sql import.

1. Create system database layout. System has two databases - one for Django system tables, the other for Sarv as well as content tables.

1A.1 Installing Django system tables:
"python3 ./manage.py migrate"
NB! Possible conflict with migration scheme of auth module. Error in console related to django/db/backends/base/schema.py self._alter_column_type_sql(). When migration tries to alter database table field length
Fix: Inside folder "django/contrib/auth/migrations/" comment out operations list of files 0002_alter_permission_name_max_length.py and 0003_alter_user_email_max_length.py where field property is altered:
8< 8< 8<
    operations = [
        #migrations.AlterField(
        #    model_name='user',
        #    name='email',
        #    field=models.EmailField(max_length=254, verbose_name='email address', blank=True),
        #),
    ] 
>8 >8 >8
1B.1. Using django.sql file provided in installation folder to populate django system database. 

1A.2. Installing Sarv app tables
"python3 ./manage.py migrate --database=sarv"
NB! Ends with error (ContentType error). Database seems to be complete though and working properly.

1B.1 Using sarv_structure.sql file provided in installation folder to import sarv database structure

IV. INSERTING DATA

A. Load data via command line installation utility. Username, database and personal_code options must be specified
"python3 ./manage.py sarv_init --username=<admin_username> --database=<usergroup> --personal_code=<personal_code>"

B. Use sarv_data.sql to import data to database. In this case personal code (column "isikukood") in demo "admin" record in user table is empty and should be filled in (record updated) manually.

V. CONFIGURE SERVER
https://docs.djangoproject.com/en/1.9/howto/deployment/wsgi/
